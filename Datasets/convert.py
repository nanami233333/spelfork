import json
import os

def atoms_to_mol(atoms):
    mol_lines = []
    
    # Add header lines for MOL file
    mol_lines.append("")
    mol_lines.append("  Generated by Script")
    mol_lines.append("")
    
    # Add atom and bond counts
    mol_lines.append(f"{len(atoms):>3}  0  0  0  0  0  0  0  0  0  0 V2000")
    
    # Add atom block
    for atom in atoms:
        mol_lines.append(f"{atom['x']:>10.4f}{atom['y']:>10.4f}{atom['z']:>10.4f} {atom['element']:>2}  0  0  0  0  0  0  0  0  0  0  0  0")

    # Add end line for MOL file
    mol_lines.append("M  END")

    return "\n".join(mol_lines)

def parse_mol_block(mol_block):
    lines = mol_block.split('\n')
    
    if len(lines) < 4:
        print(f"Warning: MOL block has insufficient lines ({len(lines)} lines)")
        return []

    try:
        atom_count = int(lines[3].split()[0])
    except (ValueError, IndexError):
        print(f"Warning: Unable to parse atom count. 4th line content: '{lines[3]}'")
        return []

    atoms = []
    for i, line in enumerate(lines[4:4+atom_count], start=4):
        parts = line.split()
        if len(parts) >= 4:
            try:
                x, y, z, element = float(parts[0]), float(parts[1]), float(parts[2]), parts[3]
                atoms.append({'element': element, 'x': x, 'y': y, 'z': z})
            except ValueError:
                print(f"Warning: Error parsing atom coordinates at line {i+1}. Line content: '{line}'")
        else:
            print(f"Warning: Line {i+1} format is incorrect. Line content: '{line}'")

    return atoms

def extract_coordinates(json_file, output_dir):
    with open(json_file, 'r') as f:
        data = json.load(f)
    
    os.makedirs(output_dir, exist_ok=True)
    
    for i, compound in enumerate(data):
        mol3d = compound.get('mol3D')
        if mol3d:
            try:
                atoms = parse_mol_block(mol3d)
                
                if not atoms:
                    print(f"Warning: The atom list for molecule_{i} is empty")
                    continue
                
                # Create MOL format file
                mol_content = atoms_to_mol(atoms)
                with open(os.path.join(output_dir, f'molecule_{i}.mol'), 'w') as f:
                    f.write(mol_content)
                
                print(f"Processed: molecule_{i}")
            except Exception as e:
                print(f"Error processing molecule_{i}: {str(e)}")
        else:
            print(f"Warning: molecule_{i} has no 3D structure information")

# Usage
json_file = 'chemspider_results.json'  # Your JSON file name
output_dir = 'extracted_mol_files'  # Output directory
extract_coordinates(json_file, output_dir)

print(f"All molecules' MOL structure information has been extracted to the '{output_dir}' directory")
